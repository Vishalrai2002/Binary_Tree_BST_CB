#include<iostream>
using namespace std;
// Introduction of Trees
// All types of traversal in trees
class node {

public:

	int data;
	node* left;
	node* right;

	node(int data) {
		this->data = data;
		left=right=NULL;
		// this->left = this->right = NULL;
	}

};

void preOrder(node* root) {

	// base case
	if(!root) { // or root == NULL
		// root represents an empty tree
		cout << "-1 ";
		return;
	}

	// recursive case

	// 1. process the data in the root node
	cout << root->data << " ";

	// 2. do the preOrder traversal of the leftSubtree -- ask your friend
	preOrder(root->left);

	// 3. do the preOrder traversal of the rightSubtree -- ask your friend
	preOrder(root->right);

}

void inOrder(node* root) {

	// base case
	if(!root) { // or root == NULL
		// root represents an empty tree
		cout << "-1 ";
		return;
	}

	// recursive case

	// 1. do the inOrder traversal of the leftSubtree -- ask your friend
	inOrder(root->left);

	// 2. process the data in the root node
	cout << root->data << " ";

	// 3. do the inOrder traversal of the rightSubtree -- ask your friend
	inOrder(root->right);

}

void postOrder(node* root) {

	// base case
	if(!root) { // or root == NULL
		// root represents an empty tree
		cout << "-1 ";
		return;
	}

	// recursive case

	// 1. do the postOrder traversal of the leftSubtree -- ask your friend
	postOrder(root->left);

	// 2. do the postOrder traversal of the rightSubtree -- ask your friend
	postOrder(root->right);

	// 3. process the data in the root node
	cout << root->data << " ";


}


int main() {

	node* root = NULL;

	root = new node(10);
	root->left = new node(20);
	root->right = new node(30);
	root->left->left = new node(40);
	root->left->right = new node(50);
	root->right->right = new node(60);
	root->left->right->left = new node(70);

	preOrder(root); cout << endl;
	inOrder(root);  cout << endl;
	postOrder(root); cout << endl;
	
	return 0;
}







