/*

	Given a binary tree, design an algorithm to check if is a BST or not.

*/

#include<iostream>
#include<climits>

#define ll long long

using namespace std;

class node {
public:
	int data;
	node* left;
	node* right;

	node(int data) {
		this->data = data;
		this->left = this->right = NULL;
	}
};

int findMaximumData(node* root) {
	if(!root) {
		return INT_MIN;
	}

	while(root->right != NULL) {
		root = root->right;
	}

	return root->data;
}

int findMinimumData(node* root) {
	if(!root) {
		return INT_MAX;
	}

	while(root->left != NULL) {
		root = root->left;
	}

	return root->data;
}

// Ist Approach
bool checkBST(node* root) {

	// base case

	if(!root) {
		// empty tree is a BST
		return true;
	}

	// recursive case

	// 1. check if the leftSubtree is a BST
	bool X = checkBST(root->left);

	// 2. check if the rightSubtree is a BST
	bool Y = checkBST(root->right);

	// 3. check if the BST prop. is satisfied at the root node
	bool Z = root->data > findMaximumData(root->left) && 
	         root->data < findMinimumData(root->right) ? true : false;

	return X && Y && Z;

}

// 2nd Approach -- can't implemented by me

class triple {

	public :

		bool isBST;
		int minData;
		int maxData;
};


triple checkBSTEfficient(node* root) {

	triple t;

	// base case

	if(!root) {
		// empty tree is a BST
		t.isBST = true;
		t.minData = INT_MAX;
		t.maxData = INT_MIN;
		
		return t;
	}

	// recursive case

	// 1. check if the leftSubtree is a BST and simultaneouly compute min. and max. data
	triple tL = checkBSTEfficient(root->left);

	// 2. check if the rightSubtree is a BST and simultaneously compute min. and max. data
	triple tR = checkBSTEfficient(root->right);

	// 3. check if the BST prop. is satisfied at the root node
	bool Z = root->data > tL.maxData && 
	         root->data < tR.minData ? true : false;

	t.isBST = tL.isBST && tR.isBST && Z;
	t.minData = min(root->data, tL.minData);
	t.maxData = max(root->data, tR.maxData);

	return t;

}

// 3rd Approach

bool checkBSTEfficient(node* root, ll lb, ll ub) {

	if(!root) {
		// empty tree is a BST
		return true;
	}
	// recursive case
    // Similar like X && Y && Z
	return root->data > lb && root->data < ub && 
	       checkBSTEfficient(root->left, lb, root->data) && 
	       checkBSTEfficient(root->right, root->data, ub);

}


int main() {

	node* root = new node(10);
	
	root->left = new node(5);
	root->left->left  = new node(3);
	root->left->right = new node(7);

	root->right = new node(15);
	root->right->left  = new node(13);
	root->right->right = new node(17);

	checkBST(root) ? cout << "true" << endl :
	                 cout << "false" << endl;

	checkBSTEfficient(root).isBST ? cout << "true" << endl :
	                                cout << "false" << endl;

	ll lb = (ll)INT_MIN - 1;
	ll ub = (ll)INT_MAX + 1;

	checkBSTEfficient(root, lb, ub) ? cout << "true" << endl : 
	                                            cout << "false" << endl;

	return 0;
}


