/*

given the pre-order traversal of a binary tree, output its right view.

Example 
	Input : 10 20 40 -1 -1 50 70 -1 -1 -1 30 -1 60 -1 -1
	Output: 10 30 60 70
*/

#include<iostream>
#include<queue>

using namespace std;

class node {
public:
	int data;
	node* left;
	node* right;

	node(int data) {
		this->data = data;
		this->left = this->right = NULL;
	}
};

node* buildTree() {

	// 1. read the data of the root node
	int data;
	cin >> data;

	if(data == -1) {
		// construct an empty tree and return the pointer to its root
		return NULL;
	}

	// 2. construct the root node
	node* root = new node(data);

	// 3. read the preOrder traversal of the leftSubtree & build the leftSubtree
	root->left = buildTree();

	// 4. read the preOrder traversal of the rightSubtree & build the rightSubtree
	root->right = buildTree();

	return root;

}
// Below code is same as we print the formatted level order , in this code we do some minor changes
void rightView(node* root) {
	queue<node*> q;
	q.push(root);
	q.push(NULL);

	while(!q.empty()) {
		node* front = q.front();
		q.pop();

		if(!front) {
			if(!q.empty()) {
				q.push(NULL);
			}
		} else {
			// front is not equal to NULL
			if(q.front() == NULL) {
				// front node is the right-most node of the last-level
				// therefore print its value
				cout << front->data << " ";
			}
			if(front->left) {
				q.push(front->left);
			}

			if(front->right) {
				q.push(front->right);
			}
		}
	}

	cout << endl;
}

int max_level = -1; // it stores the maximum level upto which
                    // you've printed the right-most node

void rightViewRecursive(node* root, int level) {
	if(!root) {
		return;
	}

	if(max_level < level) {
		cout << root->data << " ";
		max_level = level;

	}
    // we do root->right first becase we have to print right view
    // If you want to print the left view than call left recursive funciton first
	rightViewRecursive(root->right, level+1);

	rightViewRecursive(root->left, level+1);
}

int main() {

	node* root = NULL;
	root = buildTree();
	rightView(root);
	rightViewRecursive(root, 0);
	
	return 0;
}
