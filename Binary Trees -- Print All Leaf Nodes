#include<iostream>
#include<queue>
using namespace std;

class node{
    public:
    int data;
    node* left;
    node* right;

    node(int data)
    {
        this->data=data;
        this->left=this->right=NULL;
    }
};

node* buildtree() {

	int data;
	cin >> data;

// We Know First value I read is root node so that we create a root node with this data
	node* root = new node(data);

	queue<node*> q;
	q.push(root);

	while(!q.empty()) {
		node* front = q.front();
		q.pop();
 
 // Firstly we read left Data
		int leftData;
		cin >> leftData; // Input the left data
		if(leftData != -1) { // Then Check the left data is -1 or not
			node* leftChild = new node(leftData);
			front->left = leftChild;
			q.push(leftChild);
		}
// Then we read right data
		int rightData;
		cin >> rightData;
		if(rightData != -1) {
			node* rightChild = new node(rightData);
			front->right = rightChild;
			q.push(rightChild);
		}
	}

	return root;

}

void printLeafNodes(node *root)
{
    // if node is null, return
    if (!root)
        return;
     
    // if node is leaf node, print its data   
    if (!root->left && !root->right)
    {
        cout << root->data << " ";
        return;
    }
 
    // if left child exists, check for leaf
    // recursively
    if (root->left)
       printLeafNodes(root->left);
         
    // if right child exists, check for leaf
    // recursively
    if (root->right)
       printLeafNodes(root->right);
}
int main()
{
    node* root=buildtree();
    printLeafNodes(root);
    return 0;
}
